[
  {
    "type": "paragraph",
    "blockId": "4a89ebbc-9126-46c8-9d63-8c0547a55012",
    "parent": "",
    "children": []
  },
  {
    "type": "image",
    "blockId": "dd789236-17c5-42a2-bd53-d40e751d02d0",
    "parent": "![whatis-data_structure.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/6e71a81c-a821-469f-96f3-614985a18762/whatis-data_structure.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230644Z&X-Amz-Expires=3600&X-Amz-Signature=f3e58bff98acba669b09de53ca7bcfbd41b7eeff42a588b9e86d466a0c0a8479&X-Amz-SignedHeaders=host&x-id=GetObject)",
    "children": []
  },
  {
    "type": "paragraph",
    "blockId": "13efe7bc-59d7-4592-bae5-f776287dac79",
    "parent": "",
    "children": []
  },
  {
    "type": "heading_2",
    "blockId": "cd66cb8a-84c5-4e0d-a382-25f4a0136477",
    "parent": "## Primitive ",
    "children": []
  },
  {
    "type": "heading_2",
    "blockId": "2b80587a-66ef-4800-bac8-3a78c1d07927",
    "parent": "## Non-primitive ",
    "children": []
  },
  {
    "type": "divider",
    "blockId": "868d764a-2191-45ee-8829-936e3df0b042",
    "parent": "---",
    "children": []
  },
  {
    "type": "heading_2",
    "blockId": "34cd4448-3b79-4c6c-a9c5-926272884272",
    "parent": "## Á∑öÊÄßÁöÑË≥áÊñôÁµêÊßã",
    "children": []
  },
  {
    "type": "heading_3",
    "blockId": "7575a909-2366-4978-833b-60bbdc8667cf",
    "parent": "### 1. Èô£ÂàóÔºàArrayÔºâ",
    "children": [
      {
        "type": "code",
        "blockId": "4b620b75-0d82-41c3-b85b-d0218150b271",
        "parent": "```javascript\nconst arr = ['store', 1, 'whatever', 2, 'you want', 3]\n```",
        "children": []
      }
    ]
  },
  {
    "type": "heading_3",
    "blockId": "2e263e48-2d68-4831-97f8-a3c04f0fff27",
    "parent": "### 2. Áâ©‰ª∂ÔºàObject„ÄÅaka hash-tableÔºâ",
    "children": [
      {
        "type": "code",
        "blockId": "a0b9cabd-be06-4d1e-ab07-b28d5318ba7f",
        "parent": "```javascript\nconst obj = {\n    prop1: \"Hello!\",\n    prop3: function() {console.log(\"I'm a property dude!\")\n}}\n\nobj.prop3(); \"I'm a property dude!\"\n```",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "bf2c84df-4c55-4431-b715-2e9cf0790aa9",
        "parent": "- Key-value pair",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "1714541c-c3e0-444e-824c-45c3638ba9c1",
        "parent": "- Áâ©‰ª∂ÂèØ‰ª•Ë¢´‰∏âÁ®ÆÊñπÊ≥ïÂëºÂè´Ôºö`object.property`„ÄÅ`object[‚Äùproperty‚Äù]`„ÄÅ`object.method()`",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "40cf7c73-6b38-437f-97a7-c1547ff10ca2",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "heading_3",
    "blockId": "060fc1a8-fea7-4dbc-aeb6-4ace4881d017",
    "parent": "### 3. Stack",
    "children": [
      {
        "type": "image",
        "blockId": "9c60f46f-96a3-4ec4-8fe7-0902cb163f50",
        "parent": "![ÂæåÈÄ≤ÂÖàÂá∫ÔºàLIFOÔºâ](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/0469274b-1559-4657-8550-e9b16f546e3f/annie-spratt-gl7joOaABlI-unsplash.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230645Z&X-Amz-Expires=3600&X-Amz-Signature=063e9600abede03915023b9d562e98208969b0bdb78daf8f97d75edb6e15d131&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "3bf3aa0c-fa16-48da-a670-7bd2ecb61049",
        "parent": "‰ΩøÁî®ÊôÇÊ©ü",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "9dcf4695-992e-4afd-962e-e19ef0c3e5d7",
        "parent": "> üí° È°û‰ººÈô£Âàó‰∏≠ `pop`ÔºàÁßªÈô§Ôºâ„ÄÅ`push`ÔºàÊñ∞Â¢ûÔºâÁöÑÁâπÊÄß",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "c61b7caf-ed23-40e2-8d12-881ce7887025",
        "parent": "- JavaScript's call stack.",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "7e4f8209-6f69-4cf3-8359-ad72bde2fec2",
        "parent": "- Managing function invocations in various programming languages.",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "cb5a2c49-226d-4f53-be0f-ecb1daa4e6bd",
        "parent": "- The undo/redo functionality many programs offer.",
        "children": []
      },
      {
        "type": "toggle",
        "blockId": "6311e1e2-1ebb-4a73-bad5-477c13e2615d",
        "parent": "Á®ãÂºèÁ¢º",
        "children": [
          {
            "type": "code",
            "blockId": "ad011b41-80db-4ea0-a4f3-cb4ccbed8b65",
            "parent": "```javascript\n// We create a class for each node within the stack\nclass Node {\n    // Each node has two properties, its value and a pointer that indicates the node that follows\n    constructor(value){\n        this.value = value\n        this.next = null\n    }\n}\n\n// We create a class for the stack\nclass Stack {\n    // The stack has three properties, the first node, the last node and the stack size\n    constructor(){\n        this.first = null\n        this.last = null\n        this.size = 0\n    }\n    // The push method receives a value and adds it to the \"top\" of the stack\n    push(val){\n        var newNode = new Node(val)\n        if(!this.first){\n            this.first = newNode\n            this.last = newNode\n        } else {\n            var temp = this.first\n            this.first = newNode\n            this.first.next = temp\n        }\n        return ++this.size\n    }\n    // The pop method eliminates the element at the \"top\" of the stack and returns its value\n    pop(){\n        if(!this.first) return null\n        var temp = this.first\n        if(this.first === this.last){\n            this.last = null\n        }\n        this.first = this.first.next\n        this.size--\n        return temp.value\n    }\n}\n\nconst stck = new Stack\n\nstck.push(\"value1\")\nstck.push(\"value2\")\nstck.push(\"value3\")\n\nconsole.log(stck.first) /* \n        Node {\n        value: 'value3',\n        next: Node { value: 'value2', next: Node { value: 'value1', next: null } }\n        }\n    */\nconsole.log(stck.last) // Node { value: 'value1', next: null }\nconsole.log(stck.size) // 3\n\nstck.push(\"value4\")\nconsole.log(stck.pop()) // value4\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "599f9884-1baa-4352-b087-2cb0f7865bcd",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "heading_3",
    "blockId": "4a36f2b3-c8f0-4d0d-854a-f687f79dff13",
    "parent": "### 4. Queues",
    "children": [
      {
        "type": "image",
        "blockId": "b5fc111e-9a64-4649-a422-2725bb30be6b",
        "parent": "![ÂÖàÈÄ≤ÂÖàÂá∫ÔºàFIFOÔºâ](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/539d0789-ed4c-4be9-b1ee-ef2bdde89b34/john-cameron-JWEwaHqSAHU-unsplash.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230646Z&X-Amz-Expires=3600&X-Amz-Signature=ec355f7c1b829ad12923e9fd6d047e32c01e160e1ef9de2eda678a2c9dc5b35d&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "62428c32-27d9-4fd6-b853-d0657353cec2",
        "parent": "‰ΩøÁî®ÊôÇÊ©ü",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "1fe9f70f-4bf3-45d9-9af3-37914ce41099",
        "parent": "> üí° È°û‰ººÈô£Âàó‰∏≠ shift„ÄÅpopÁöÑÁâπÊÄß",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "2485e4e7-4a75-449c-93ce-6464912986a5",
        "parent": "- Background tasks.",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "2296c716-459a-4b18-aad5-a04622fd3cf0",
        "parent": "- Printing/[task processing](https://medium.com/swlh/background-job-and-queue-practical-application-use-cases-8cd1cc83afdf).",
        "children": []
      },
      {
        "type": "toggle",
        "blockId": "9c416d74-e780-4d86-8351-58404d8d42b1",
        "parent": "Á®ãÂºèÁ¢º",
        "children": [
          {
            "type": "code",
            "blockId": "eb7efd45-114b-4acb-b7e1-0667415e9b4a",
            "parent": "```javascript\n// We create a class for each node within the queue\nclass Node {\n    // Each node has two properties, its value and a pointer that indicates the node that follows\n    constructor(value){\n        this.value = value\n        this.next = null\n    }\n}\n\n// We create a class for the queue\nclass Queue {\n    // The queue has three properties, the first node, the last node and the queue size\n    constructor(){\n        this.first = null\n        this.last = null\n        this.size = 0\n    }\n    // The enqueue method receives a value and adds it to the \"end\" of the queue\n    enqueue(val){\n        var newNode = new Node(val)\n        if(!this.first){\n            this.first = newNode\n            this.last = newNode\n        } else {\n            this.last.next = newNode\n            this.last = newNode\n        }\n        return ++this.size\n    }\n    // The dequeue method eliminates the element at the \"beginning\" of the queue and returns its value\n    dequeue(){\n        if(!this.first) return null\n\n        var temp = this.first\n        if(this.first === this.last) {\n            this.last = null\n        }\n        this.first = this.first.next\n        this.size--\n        return temp.value\n    }\n}\n\nconst quickQueue = new Queue\n\nquickQueue.enqueue(\"value1\")\nquickQueue.enqueue(\"value2\")\nquickQueue.enqueue(\"value3\")\n\nconsole.log(quickQueue.first) /* \n        Node {\n            value: 'value1',\n            next: Node { value: 'value2', next: Node { value: 'value3', next: null } }\n        }\n    */\nconsole.log(quickQueue.last) // Node { value: 'value3, next: null }\nconsole.log(quickQueue.size) // 3\n\nquickQueue.enqueue(\"value4\")\nconsole.log(quickQueue.dequeue()) // value1\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "22c68a83-a52a-4a3f-b29f-2c2f383fd45c",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "heading_3",
    "blockId": "c7ba1e2f-7ef4-4802-874a-6eae1a7df937",
    "parent": "### 5. Linked Lists",
    "children": [
      {
        "type": "image",
        "blockId": "10b5ce5e-2ee4-4efb-a8c1-796a275d363c",
        "parent": "![linked-list.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/5869c12b-9c87-4e77-bf89-f62beba20a74/linked-list.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230647Z&X-Amz-Expires=3600&X-Amz-Signature=b1a5f195b99a51b4cd4bdb75776b360175a3fa1a0b05d3b5167b726c9f7d0cb9&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "c590af55-b1dd-4207-bf36-05b0c6fd877c",
        "parent": "Âú® Linked List Áï∂‰∏≠ÔºåÊØè‰∏ÄÁµÑË≥áÊñôÈÉΩË¢´Ë¶ñÁÇ∫‰∏ÄÂÄãÁØÄÈªûÔºåÂêåÊôÇÊØè‰∏ÄÂÄãÁØÄÈªû‰πüÊúÉÊåáÂêë‰∏ã‰∏ÄÂÄãÁØÄÈªû„ÄÇ",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "f60a1bf2-b2d6-4a9d-a788-d88ec03916f3",
        "parent": "",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "7086d634-b868-4e90-8c27-dd1a03002154",
        "parent": "ÂêåÊôÇÊúâÂàÜÊàê**ÂñÆÂêëÔºàSingly Linked ListÔºâ**„ÄÅ**ÈõôÂêëÔºàDouble Linked ListÔºâ**ÁöÑÂûãÊÖã",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "4c568968-333d-4705-a784-c493a35c8c78",
        "parent": "",
        "children": []
      },
      {
        "type": "toggle",
        "blockId": "56365af1-84fe-4267-bd94-17880dc3c9b4",
        "parent": "Á®ãÂºèÁ¢ºÔºöSingly Linked List",
        "children": [
          {
            "type": "code",
            "blockId": "3e1d6ca2-2f96-42a6-93f8-4d57cc5ec38e",
            "parent": "```javascript\n// We create a class for each node within the list\nclass Node{\n    // Each node has two properties, its value and a pointer that indicates the node that follows\n    constructor(val){\n        this.val = val\n        this.next = null\n    }\n}\n\n// We create a class for the list\nclass SinglyLinkedList{\n    // The list has three properties, the head, the tail and the list size\n    constructor(){\n        this.head = null\n        this.tail = null\n        this.length = 0\n    }\n    // The push method takes a value as parameter and assigns it as the tail of the list\n    push(val) {\n        const newNode = new Node(val)\n        if (!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this\n    }\n    // The pop method removes the tail of the list\n    pop() {\n        if (!this.head) return undefined\n        const current = this.head\n        const newTail = current\n        while (current.next) {\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if (this.length === 0) {\n            this.head = null\n            this.tail = null\n        }\n        return current\n    }\n    // The shift method removes the head of the list\n    shift() {\n        if (!this.head) return undefined\n        var currentHead = this.head\n        this.head = currentHead.next\n        this.length--\n        if (this.length === 0) {\n            this.tail = null\n        }\n        return currentHead\n    }\n    // The unshift method takes a value as parameter and assigns it as the head of the list\n    unshift(val) {\n        const newNode = new Node(val)\n        if (!this.head) {\n            this.head = newNode\n            this.tail = this.head\n        }\n        newNode.next = this.head\n        this.head = newNode\n        this.length++\n        return this\n    }\n    // The get method takes an index number as parameter and returns the value of the node at that index\n    get(index) {\n        if(index < 0 || index >= this.length) return null\n        const counter = 0\n        const current = this.head\n        while(counter !== index) {\n            current = current.next\n            counter++\n        }\n        return current\n    }\n    // The set method takes an index number and a value as parameters, and modifies the node value at the given index in the list\n    set(index, val) {\n        const foundNode = this.get(index)\n        if (foundNode) {\n            foundNode.val = val\n            return true\n        }\n        return false\n    }\n    // The insert method takes an index number and a value as parameters, and inserts the value at the given index in the list\n    insert(index, val) {\n        if (index < 0 || index > this.length) return false\n        if (index === this.length) return !!this.push(val)\n        if (index === 0) return !!this.unshift(val)\n\n        const newNode = new Node(val)\n        const prev = this.get(index - 1)\n        const temp = prev.next\n        prev.next = newNode\n        newNode.next = temp\n        this.length++\n        return true\n    }\n    // The remove method takes an index number as parameter and removes the node at the given index in the list\n    remove(index) {\n        if(index < 0 || index >= this.length) return undefined\n        if(index === 0) return this.shift()\n        if(index === this.length - 1) return this.pop()\n        const previousNode = this.get(index - 1)\n        const removed = previousNode.next\n        previousNode.next = removed.next\n        this.length--\n        return removed\n    }\n    // The reverse method reverses the list and all pointers so that the head becomes the tail and the tail becomes the head\n    reverse(){\n      const node = this.head\n      this.head = this.tail\n      this.tail = node\n      let next\n      const prev = null\n      for(let i = 0; i < this.length; i++) {\n        next = node.next\n        node.next = prev\n        prev = node\n        node = next\n      }\n      return this\n    }\n}\n```",
            "children": []
          }
        ]
      },
      {
        "type": "toggle",
        "blockId": "181c0a05-333f-4361-9b33-c0cb46bb4fd8",
        "parent": "Á®ãÂºèÁ¢ºÔºöDoubly Linked List",
        "children": [
          {
            "type": "code",
            "blockId": "f4e30e35-0d23-4f61-80d7-f2a213c23e93",
            "parent": "```javascript\n// We create a class for each node within the list\nclass Node{\n    // Each node has three properties, its value, a pointer that indicates the node that follows and a pointer that indicates the previous node\n    constructor(val){\n        this.val = val;\n        this.next = null;\n        this.prev = null;\n    }\n}\n\n// We create a class for the list\nclass DoublyLinkedList {\n    // The list has three properties, the head, the tail and the list size\n    constructor(){\n        this.head = null\n        this.tail = null\n        this.length = 0\n    }\n    // The push method takes a value as parameter and assigns it as the tail of the list\n    push(val){\n        const newNode = new Node(val)\n        if(this.length === 0){\n            this.head = newNode\n            this.tail = newNode\n        } else {\n            this.tail.next = newNode\n            newNode.prev = this.tail\n            this.tail = newNode\n        }\n        this.length++\n        return this\n    }\n    // The pop method removes the tail of the list\n    pop(){\n        if(!this.head) return undefined\n        const poppedNode = this.tail\n        if(this.length === 1){\n            this.head = null\n            this.tail = null\n        } else {\n            this.tail = poppedNode.prev\n            this.tail.next = null\n            poppedNode.prev = null\n        }\n        this.length--\n        return poppedNode\n    }\n    // The shift method removes the head of the list\n    shift(){\n        if(this.length === 0) return undefined\n        const oldHead = this.head\n        if(this.length === 1){\n            this.head = null\n            this.tail = null\n        } else{\n            this.head = oldHead.next\n            this.head.prev = null\n            oldHead.next = null\n        }\n        this.length--\n        return oldHead\n    }\n    // The unshift method takes a value as parameter and assigns it as the head of the list\n    unshift(val){\n        const newNode = new Node(val)\n        if(this.length === 0) {\n            this.head = newNode\n            this.tail = newNode\n        } else {\n            this.head.prev = newNode\n            newNode.next = this.head\n            this.head = newNode\n        }\n        this.length++\n        return this\n    }\n    // The get method takes an index number as parameter and returns the value of the node at that index\n    get(index){\n        if(index < 0 || index >= this.length) return null\n        let count, current\n        if(index <= this.length/2){\n            count = 0\n            current = this.head\n            while(count !== index){\n                current = current.next\n                count++\n            }\n        } else {\n            count = this.length - 1\n            current = this.tail\n            while(count !== index){\n                current = current.prev\n                count--\n            }\n        }\n        return current\n    }\n    // The set method takes an index number and a value as parameters, and modifies the node value at the given index in the list\n    set(index, val){\n        var foundNode = this.get(index)\n        if(foundNode != null){\n            foundNode.val = val\n            return true\n        }\n        return false\n    }\n    // The insert method takes an index number and a value as parameters, and inserts the value at the given index in the list\n    insert(index, val){\n        if(index < 0 || index > this.length) return false\n        if(index === 0) return !!this.unshift(val)\n        if(index === this.length) return !!this.push(val)\n\n        var newNode = new Node(val)\n        var beforeNode = this.get(index-1)\n        var afterNode = beforeNode.next\n\n        beforeNode.next = newNode, newNode.prev = beforeNode\n        newNode.next = afterNode, afterNode.prev = newNode\n        this.length++\n        return true\n    }\n}\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "29cbc5b0-8fe1-41db-8658-ae4708d5e542",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "divider",
    "blockId": "65ec87ce-4d15-4093-94f5-1faccb7bcae8",
    "parent": "---",
    "children": []
  },
  {
    "type": "heading_2",
    "blockId": "ad31a395-b239-4afb-813e-7d40b9cc8097",
    "parent": "## ÈùûÁ∑öÊÄßÁöÑË≥áÊñôÁµêÊßã",
    "children": []
  },
  {
    "type": "heading_3",
    "blockId": "1c63b65e-0d8d-4928-84f1-0011d33e67e1",
    "parent": "### 6. Trees",
    "children": [
      {
        "type": "bulleted_list_item",
        "blockId": "e173bd94-c9d3-40dc-9ce6-7de0a8a99f0d",
        "parent": "- **only valid connection between nodes is from parent to child** .",
        "children": []
      },
      {
        "type": "image",
        "blockId": "3dcd0f1a-b802-4cad-9dfb-0ed5e6df7f6a",
        "parent": "![images.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/9c2734a3-0af0-4f4e-86fd-0474ca161dcb/images.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230651Z&X-Amz-Expires=3600&X-Amz-Signature=ea9f797433414b3df6aeb9aa35114cd2adf8a202eee7b69541db1fbb964b95ca&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "81928db7-b7f3-43da-a6b4-8e94a2c90f47",
        "parent": "Áî®ÈÄîÔºö",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "5498695d-4cd9-430f-8a0e-480f1f5bcf3a",
        "parent": "- The DOM model.",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "f639b97d-838c-43e0-a536-96de35e76c67",
        "parent": "- Situation analysis in artificial intelligence.",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "524d2615-bf7b-46eb-9eee-ecaf4dee0905",
        "parent": "- File folders in operating systems.",
        "children": [
          {
            "type": "heading_3",
            "blockId": "1d10c362-e525-47c1-b489-f177617b57b7",
            "parent": "### Binary Trees",
            "children": [
              {
                "type": "quote",
                "blockId": "c4f513b6-d347-4485-8e1c-d41aee83981d",
                "parent": "> Binary trees are a type of tree in which each node has a maximum of two children.",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "efb6d4de-cdf2-4b6e-bacd-82349fc73bca",
                "parent": "",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "28cfb27b-9549-46dc-8430-dc369f7efa69",
                "parent": "‰∫åÂÖÉÊ®πÊêúÂ∞ãÊ≥ïÔºàBinary Tree SearchÔºâ",
                "children": []
              },
              {
                "type": "image",
                "blockId": "6cd343ae-dffd-49cc-add4-eaa9ff4a1f80",
                "parent": "![download--1-.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/4a459802-325e-4c4e-824b-f633efd21d5b/download--1-.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230651Z&X-Amz-Expires=3600&X-Amz-Signature=e410a5f7109421a1b4e9613cc68c55f9dc771ad01694d4bfc920e880ab0c2614&X-Amz-SignedHeaders=host&x-id=GetObject)",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "f2e3f8e8-325f-4a39-a5de-bce78572fafe",
                "parent": "- Check if there's a root node.",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "e5359e12-4007-4b09-beed-fff03807e417",
                "parent": "- If there is, check if the value to add/delete is greater or smaller than the node.",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "ef6947e3-eba5-43ba-977a-a8d21f54d9d5",
                "parent": "- If it is smaller, check if there is a node to the left and repeat the previous operation. If there's not, add/remove the node in that position.",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "6eadd58f-b2f3-42b1-b51a-6fb1cadf2a70",
                "parent": "- If it is greater, check if there is a node to the right and repeat the previous operation. If there's not, add/remove the node in that position.",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "6f7afc64-aef2-47b7-8095-344533d7c80a",
                "parent": "",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "41701039-6078-4994-ae3b-9f21f6e5407f",
                "parent": "‚ùìÂ¶Ç‰ΩïÊâæ4ÊîæÂú®Âì™Ôºü",
                "children": []
              },
              {
                "type": "numbered_list_item",
                "blockId": "ecbf29c7-e6a7-42b2-b257-4d21acc6ac06",
                "parent": "1. 4 > 2 ‚áí ÂæÄÂè≥",
                "children": []
              },
              {
                "type": "numbered_list_item",
                "blockId": "2cc2875b-b9da-4d26-8522-922f5c24d9b7",
                "parent": "2. 4",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "57a07bca-9989-4f6f-b9e5-4494ab4d6dff",
                "parent": "",
                "children": []
              },
              {
                "type": "toggle",
                "blockId": "6f55e5f2-7c12-435c-a57e-fe8d4db918ed",
                "parent": "Á®ãÂºèÁ¢ºÔºöBinary Search",
                "children": [
                  {
                    "type": "code",
                    "blockId": "d9af84c1-0d0d-4863-91a2-f306ffdd1100",
                    "parent": "```javascript\n// We create a class for each node within the tree\nclass Node{\n    // Each node has three properties, its value, a pointer that indicates the node to its left and a pointer that indicates the node to its right\n    constructor(value){\n        this.value = value\n        this.left = null\n        this.right = null\n    }\n}\n// We create a class for the BST\nclass BinarySearchTree {\n    // The tree has only one property which is its root node\n    constructor(){\n        this.root = null\n    }\n    // The insert method takes a value as parameter and inserts the value in its corresponding place within the tree\n    insert(value){\n        const newNode = new Node(value)\n        if(this.root === null){\n            this.root = newNode\n            return this\n        }\n        let current = this.root\n        while(true){\n            if(value === current.value) return undefined\n            if(value < current.value){\n                if(current.left === null){\n                    current.left = newNode\n                    return this\n                }\n                current = current.left\n            } else {\n                if(current.right === null){\n                    current.right = newNode\n                    return this\n                } \n                current = current.right\n            }\n        }\n    }\n    // The find method takes a value as parameter and iterates through the tree looking for that value\n    // If the value is found, it returns the corresponding node and if it's not, it returns undefined\n    find(value){\n        if(this.root === null) return false\n        let current = this.root,\n            found = false\n        while(current && !found){\n            if(value < current.value){\n                current = current.left\n            } else if(value > current.value){\n                current = current.right\n            } else {\n                found = true\n            }\n        }\n        if(!found) return undefined\n        return current\n    }\n    // The contains method takes a value as parameter and returns true if the value is found within the tree\n    contains(value){\n        if(this.root === null) return false\n        let current = this.root,\n            found = false\n        while(current && !found){\n            if(value < current.value){\n                current = current.left\n            } else if(value > current.value){\n                current = current.right\n            } else {\n                return true\n            }\n        }\n        return false\n    }\n}\n```",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "type": "heading_3",
            "blockId": "8c4c68fa-f842-4d09-b136-e65a45d0aef7",
            "parent": "### Heaps",
            "children": [
              {
                "type": "callout",
                "blockId": "422cc00d-2902-422c-9033-9dd6b4b3220b",
                "parent": "> üí° ÁâπËâ≤Ôºö  \n> 1. Â≠êÁØÄÈªûÁöÑÂ±§Á¥öÁõ∏Âêå  \n> 2. Ë≥áÊñôÊéíÂ∫èÂæàÁ∑äÊπäÔºåÂ¶ÇÊûúParent NodeÊúâÁ©∫ÁöÑÁØÄÈªûÔºåÊáâË©≤È¶¨‰∏äË£ú‰∏ä",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "a2792451-d710-4612-8b09-98f280639ace",
                "parent": "- MaxHeaps: parent nodes are always greater than its children",
                "children": []
              },
              {
                "type": "image",
                "blockId": "a80416a6-162a-4299-b2c9-df1a6de0ea79",
                "parent": "![max Heap](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/a363cc4b-722b-46f5-b010-1d6cc49974b5/max_heap_example-2.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230654Z&X-Amz-Expires=3600&X-Amz-Signature=26c27522c722f33c25350e2b2fa3c62d0545d130d772376ac7e6c97b1a754f32&X-Amz-SignedHeaders=host&x-id=GetObject)",
                "children": []
              },
              {
                "type": "bulleted_list_item",
                "blockId": "1348bf23-2ec2-44a4-9d85-1b92d64497b7",
                "parent": "- MinHeaps: parent nodes are always smaller than its children.",
                "children": []
              },
              {
                "type": "image",
                "blockId": "753a04c8-d39e-4e81-ba5c-fd5a417bc233",
                "parent": "![Min Heap](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/171ba765-7b9d-473d-bf23-1c715f633914/min_heap_example.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230654Z&X-Amz-Expires=3600&X-Amz-Signature=da44984419e253eacc474b2c271fe42781421a3229c168844078aa9fb5fad99d&X-Amz-SignedHeaders=host&x-id=GetObject)",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "c6c53fcd-dc18-4304-b34c-41a9132855ea",
                "parent": "",
                "children": []
              },
              {
                "type": "paragraph",
                "blockId": "3c36a0ed-4627-4608-a5ba-574916177a89",
                "parent": "",
                "children": []
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "type": "heading_3",
    "blockId": "1307c223-4f72-490b-a39e-50e92d3eafb2",
    "parent": "### 7. Graphs",
    "children": [
      {
        "type": "callout",
        "blockId": "31d3169d-e845-4480-8023-5bd6165c463c",
        "parent": "> üí° Unlike trees, graphs don't have root and leaf nodes, nor a \"head\" or a \"tail\". ",
        "children": []
      },
      {
        "type": "image",
        "blockId": "eb0a76af-b180-446b-b8c1-011064f8f1c7",
        "parent": "![images-1.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a3329b51-a207-43ca-8d9d-85d01045e23a/fdc847c1-1147-4ae1-be3f-61fdac68cfc7/images-1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240526%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240526T230654Z&X-Amz-Expires=3600&X-Amz-Signature=bc5e02779aa2dfb53f6c81cdda60c70e341a7fec65accac913b0ef56b7251443&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "4ec3f560-aa45-4e9f-a425-6b68df169922",
        "parent": "Áî®ÈÄîÔºö",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "6b8e42ca-1552-4065-ba0e-1499cf755af0",
        "parent": "- Social networks",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "fe5d6a9d-0e44-4855-bc57-5405fb9dd95b",
        "parent": "- Geolocalizaton",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "82b923bb-f04a-4f27-88b3-bd9125d3093e",
        "parent": "- Recommendation systems",
        "children": []
      },
      {
        "type": "toggle",
        "blockId": "22ab8ab6-568f-4e30-bd81-e1519f18d17f",
        "parent": "Á®ãÂºèÁ¢ºÔºö",
        "children": [
          {
            "type": "code",
            "blockId": "f5be2037-296c-471b-bc72-6b9a0c503193",
            "parent": "```javascript\n// We create a class for the graph\nclass Graph{\n    // The graph has only one property which is the adjacency list\n    constructor() {\n        this.adjacencyList = {}\n    }\n    // The addNode method takes a node value as parameter and adds it as a key to the adjacencyList if it wasn't previously present\n    addNode(node) {\n        if (!this.adjacencyList[node]) this.adjacencyList[node] = []\n    }\n    // The addConnection takes two nodes as parameters, and it adds each node to the other's array of connections.\n    addConnection(node1,node2) {\n        this.adjacencyList[node1].push(node2)\n        this.adjacencyList[node2].push(node1)\n    }\n    // The removeConnection takes two nodes as parameters, and it removes each node from the other's array of connections.\n    removeConnection(node1,node2) {\n        this.adjacencyList[node1] = this.adjacencyList[node1].filter(v => v !== node2)\n        this.adjacencyList[node2] = this.adjacencyList[node2].filter(v => v !== node1)\n    }\n    // The removeNode method takes a node value as parameter. It removes all connections to that node present in the graph and then deletes the node key from the adj list.\n    removeNode(node){\n        while(this.adjacencyList[node].length) {\n            const adjacentNode = this.adjacencyList[node].pop()\n            this.removeConnection(node, adjacentNode)\n        }\n        delete this.adjacencyList[node]\n    }\n}\n\nconst Argentina = new Graph()\nArgentina.addNode(\"Buenos Aires\")\nArgentina.addNode(\"Santa fe\")\nArgentina.addNode(\"C√≥rdoba\")\nArgentina.addNode(\"Mendoza\")\nArgentina.addConnection(\"Buenos Aires\", \"C√≥rdoba\")\nArgentina.addConnection(\"Buenos Aires\", \"Mendoza\")\nArgentina.addConnection(\"Santa fe\", \"C√≥rdoba\")\n\nconsole.log(Argentina)\n// Graph {\n//     adjacencyList: {\n//         'Buenos Aires': [ 'C√≥rdoba', 'Mendoza' ],\n//         'Santa fe': [ 'C√≥rdoba' ],\n//         'C√≥rdoba': [ 'Buenos Aires', 'Santa fe' ],\n//         Mendoza: [ 'Buenos Aires' ]\n//     }\n// }\n```",
            "children": []
          }
        ]
      }
    ]
  },
  {
    "type": "heading_1",
    "blockId": "0630acb4-8a41-446d-89dc-82c14786421d",
    "parent": "# ÂèÉËÄÉË≥áÊñô",
    "children": []
  },
  {
    "type": "bookmark",
    "blockId": "b6279304-7de4-49aa-b6c0-5ecf12cb926c",
    "parent": "[bookmark](https://www.freecodecamp.org/news/data-structures-in-javascript-with-examples/)",
    "children": []
  },
  {
    "type": "bookmark",
    "blockId": "4b2c8f21-c441-47c5-a401-f0e75f745574",
    "parent": "[bookmark](https://break0344.medium.com/data-structures-and-algorithms-0-720c04cb8082)",
    "children": []
  },
  {
    "type": "bookmark",
    "blockId": "c718c84f-a330-411e-a930-dd9deb6a50a4",
    "parent": "[bookmark](https://medium.com/appworks-school/ÂàùÂ≠∏ËÄÖÂ≠∏ÊºîÁÆóÊ≥ï-Ë´á‰ªÄÈ∫ºÊòØÊºîÁÆóÊ≥ïÂíåÊôÇÈñìË§áÈõúÂ∫¶-b1f6908e4b80)",
    "children": []
  },
  {
    "type": "bookmark",
    "blockId": "9f79a6fa-cac4-47a3-9445-ef15abf77eca",
    "parent": "[bookmark](https://ithelp.ithome.com.tw/articles/10322467)",
    "children": []
  },
  {
    "type": "paragraph",
    "blockId": "4396ee2b-03ea-454b-9eff-95c370d2f916",
    "parent": "",
    "children": []
  }
]
